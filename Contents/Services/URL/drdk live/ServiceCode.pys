TITLE = 'DR TV'
PREFIX_VIDEO = '/video/drdk'
PREFIX_AUDIO = '/audio/drdk'
API_URL = 'http://www.dr.dk/mu-online/api/'
ART = 'art-default.jpg'
ICON = 'icon-default.png'
WebsiteURL = 'http://www.dr.dk'
WebsiteTVURL = 'http://www.dr.dk/tv'
API_VERSION = "1.1"

def MetadataObjectForURL(url):
	vc = VideoClipObject()
	
	# Get slug from URL
	slug = url.rsplit('/',1)[1]
	# Request JSON for channel 
	json = JSON.ObjectFromURL(API_URL + API_VERSION + '/page/tv/live/' + slug)
	drNow = json['NowNext']['Now']
	vc.title = unicode(drNow['Title'])
	vc.summary = unicode(drNow['Description'])
	vc.art= drNow['ProgramCard']['PrimaryImageUri']
	vc.thumb = drNow['ProgramCard']['PrimaryImageUri']
	return vc

def MediaObjectsForURL(url):
	# Get slug from URL
	slug = url.rsplit('/',1)[1]
	return [MediaObject(protocol = 'hls',
					video_codec = VideoCodec.H264,
					audio_codec = AudioCodec.AAC,
					audio_channels = 2,
					optimized_for_streaming = True,
					parts = [PartObject(key = HTTPLiveStreamURL(url = Callback(PlayMedia, slug = slug)  ))])]
	
@indirect
def PlayMedia(slug):
	# get JSON for channel
	json = JSON.ObjectFromURL(API_URL + API_VERSION + '/page/tv/live/' + slug)
	# Loop all StreamingServers
	for StreamingServers in json['Channel']['StreamingServers']:
		# Find HLS streams
		if StreamingServers['LinkType'] == "HLS":
			uri = StreamingServers['Server'] + '/' + StreamingServers['Qualities'][0]['Streams'][0]['Stream']
	# Call Gemius to increase DR Most Viewed
	gemius(json['NowNext']['Now']['ProgramCard']['Slug'])
	
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(url = uri))
	
def gemius(id):
	# construct JSON for DR most viewed HTTP POST 
	
	# Sometimes Product is None:
    product = Client.Product
    if product is None:
        product = 'unknown'
    
	json = JSON.ObjectFromString('{"id":"' + id + '","Client":"Plex.' + product + '.' + Client.Version + '"}')
 	# POST to increase DR most viewed list  
	HTTP.Request(API_URL + API_VERSION + '/reporting/viewed', values = json, method = 'POST')
	return None

def NormalizeURL(url):
	# remove pause url tag
	return url.rsplit('#!',1)[0]

def TestURLs():
	test_urls = []
	json= JSON.ObjectFromURL('http://www.dr.dk/mu-online/api/1.1/page/tv/front')
	for channels in json['Live']:
		test_urls.append(WebsiteTVURL + '/live/' + channels['ChannelSlug'])
	return test_urls